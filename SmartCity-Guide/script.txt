#!/bin/bash

# ===================================================
# Smart City IMS - Automated Setup Script
# ===================================================

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}"
echo "=================================================="
echo "  Smart City IMS - Automated Setup"
echo "=================================================="
echo -e "${NC}"

# Function to print colored messages
print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

print_info() {
    echo -e "${YELLOW}→ $1${NC}"
}

# Check prerequisites
check_prerequisites() {
    print_info "Checking prerequisites..."
    
    # Check Docker
    if ! command -v docker &> /dev/null; then
        print_error "Docker is not installed. Please install Docker first."
        exit 1
    fi
    print_success "Docker found"
    
    # Check Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose is not installed."
        exit 1
    fi
    print_success "Docker Compose found"
    
    # Check Python
    if ! command -v python3 &> /dev/null; then
        print_error "Python 3 is not installed."
        exit 1
    fi
    print_success "Python 3 found"
    
    # Check Java
    if ! command -v java &> /dev/null; then
        print_error "Java is not installed. Please install Java 17+."
        exit 1
    fi
    print_success "Java found"
    
    # Check Node.js
    if ! command -v node &> /dev/null; then
        print_error "Node.js is not installed."
        exit 1
    fi
    print_success "Node.js found"
}

# Setup Docker infrastructure
setup_infrastructure() {
    print_info "Setting up infrastructure with Docker Compose..."
    
    # Stop existing containers
    docker-compose down 2>/dev/null || true
    
    # Start services
    docker-compose up -d
    
    # Wait for services to be ready
    print_info "Waiting for services to start..."
    sleep 20
    
    # Check PostgreSQL
    until docker exec smart-city-postgres pg_isready -U smartcity_user -d smartcity &>/dev/null; do
        print_info "Waiting for PostgreSQL..."
        sleep 2
    done
    print_success "PostgreSQL is ready"
    
    # Check Kafka
    until docker exec smart-city-kafka kafka-broker-api-versions \
        --bootstrap-server localhost:9092 &>/dev/null; do
        print_info "Waiting for Kafka..."
        sleep 2
    done
    print_success "Kafka is ready"
    
    # Check Redis
    until docker exec smart-city-redis redis-cli ping &>/dev/null; do
        print_info "Waiting for Redis..."
        sleep 2
    done
    print_success "Redis is ready"
}

# Setup Python environment
setup_python() {
    print_info "Setting up Python environment..."
    
    # Create virtual environment if it doesn't exist
    if [ ! -d "venv" ]; then
        python3 -m venv venv
        print_success "Virtual environment created"
    fi
    
    # Activate virtual environment
    source venv/bin/activate
    
    # Install dependencies
    pip install --upgrade pip
    pip install -r requirements.txt
    
    print_success "Python dependencies installed"
}

# Setup Java backend
setup_backend() {
    print_info "Building Spring Boot backend..."
    
    cd backend
    
    # Check for Maven
    if command -v mvn &> /dev/null; then
        mvn clean install -DskipTests
    elif [ -f "mvnw" ]; then
        ./mvnw clean install -DskipTests
    else
        print_error "Maven not found"
        exit 1
    fi
    
    cd ..
    print_success "Backend built successfully"
}

# Setup Angular frontend
setup_frontend() {
    print_info "Setting up Angular frontend..."
    
    cd frontend
    
    # Install dependencies
    npm install
    
    cd ..
    print_success "Frontend dependencies installed"
}

# Create Kafka topics
create_kafka_topics() {
    print_info "Creating Kafka topics..."
    
    docker exec smart-city-kafka kafka-topics --create \
        --bootstrap-server localhost:9092 \
        --topic smart-city-sensors \
        --partitions 3 \
        --replication-factor 1 \
        --if-not-exists
    
    print_success "Kafka topics created"
}

# Initialize database
init_database() {
    print_info "Initializing database schema..."
    
    docker exec -i smart-city-postgres psql -U smartcity_user -d smartcity < init-db.sql
    
    print_success "Database initialized"
}

# Start all services
start_services() {
    print_info "Starting all services..."
    
    # Start IoT Simulator in background
    source venv/bin/activate
    nohup python iot_sensor_simulator.py > logs/iot-simulator.log 2>&1 &
    IOT_PID=$!
    echo $IOT_PID > logs/iot-simulator.pid
    print_success "IoT Simulator started (PID: $IOT_PID)"
    
    # Start PySpark Streaming in background
    nohup python pyspark_streaming_processor.py > logs/pyspark-streaming.log 2>&1 &
    SPARK_PID=$!
    echo $SPARK_PID > logs/pyspark-streaming.pid
    print_success "PySpark Streaming started (PID: $SPARK_PID)"
    
    # Start Spring Boot backend in background
    cd backend
    nohup java -jar target/smart-city-ims-1.0.0.jar > ../logs/backend.log 2>&1 &
    BACKEND_PID=$!
    echo $BACKEND_PID > ../logs/backend.pid
    cd ..
    print_success "Backend started (PID: $BACKEND_PID)"
    
    # Wait for backend to be ready
    print_info "Waiting for backend to be ready..."
    until curl -s http://localhost:8081/actuator/health > /dev/null; do
        sleep 2
    done
    print_success "Backend is ready"
    
    # Start Angular frontend
    cd frontend
    nohup ng serve --port 4200 > ../logs/frontend.log 2>&1 &
    FRONTEND_PID=$!
    echo $FRONTEND_PID > ../logs/frontend.pid
    cd ..
    print_success "Frontend started (PID: $FRONTEND_PID)"
}

# Stop all services
stop_services() {
    print_info "Stopping all services..."
    
    # Kill processes
    if [ -f logs/iot-simulator.pid ]; then
        kill $(cat logs/iot-simulator.pid) 2>/dev/null || true
        rm logs/iot-simulator.pid
    fi
    
    if [ -f logs/pyspark-streaming.pid ]; then
        kill $(cat logs/pyspark-streaming.pid) 2>/dev/null || true
        rm logs/pyspark-streaming.pid
    fi
    
    if [ -f logs/backend.pid ]; then
        kill $(cat logs/backend.pid) 2>/dev/null || true
        rm logs/backend.pid
    fi
    
    if [ -f logs/frontend.pid ]; then
        kill $(cat logs/frontend.pid) 2>/dev/null || true
        rm logs/frontend.pid
    fi
    
    # Stop Docker containers
    docker-compose down
    
    print_success "All services stopped"
}

# Display status
show_status() {
    echo -e "\n${GREEN}=================================================="
    echo "  Service Status"
    echo "==================================================${NC}\n"
    
    echo "Docker Services:"
    docker-compose ps
    
    echo -e "\n${GREEN}Access Points:${NC}"
    echo "  - Kafka UI:        http://localhost:8080"
    echo "  - Backend API:     http://localhost:8081"
    echo "  - Frontend:        http://localhost:4200"
    echo "  - Actuator:        http://localhost:8081/actuator"
    echo ""
    echo "  - PostgreSQL:      localhost:5432"
    echo "  - Redis:           localhost:6379"
    echo "  - Kafka:           localhost:9092"
    
    echo -e "\n${GREEN}Logs:${NC}"
    echo "  - IoT Simulator:   logs/iot-simulator.log"
    echo "  - PySpark:         logs/pyspark-streaming.log"
    echo "  - Backend:         logs/backend.log"
    echo "  - Frontend:        logs/frontend.log"
    
    echo -e "\n${YELLOW}Quick Commands:${NC}"
    echo "  - Stop all:        ./setup.sh stop"
    echo "  - View logs:       tail -f logs/*.log"
    echo "  - Restart:         ./setup.sh restart"
}

# Main execution
main() {
    # Create logs directory
    mkdir -p logs
    
    case "${1:-setup}" in
        setup)
            check_prerequisites
            setup_infrastructure
            create_kafka_topics
            init_database
            setup_python
            setup_backend
            setup_frontend
            start_services
            show_status
            ;;
        start)
            start_services
            show_status
            ;;
        stop)
            stop_services
            ;;
        restart)
            stop_services
            sleep 2
            start_services
            show_status
            ;;
        status)
            show_status
            ;;
        clean)
            stop_services
            docker-compose down -v
            rm -rf venv logs
            print_success "Clean completed"
            ;;
        *)
            echo "Usage: $0 {setup|start|stop|restart|status|clean}"
            exit 1
            ;;
    esac
}

# Run main function
main "$@"

echo -e "\n${GREEN}✓ Done!${NC}\n"
