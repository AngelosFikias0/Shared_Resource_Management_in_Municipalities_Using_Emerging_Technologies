3)Τώρα ας δημιουργήσουμε το PostgreSQL initialization script:
---
-- Smart City IMS Database Schema
-- PostgreSQL 15+

-- Δημιουργία extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "postgis";
CREATE EXTENSION IF NOT EXISTS "timescaledb";

-- ============================================
-- ΠΙΝΑΚΑΣ: Sensors
-- Καταγραφή αισθητήρων και μεταδεδομένων
-- ============================================
CREATE TABLE sensors (
    sensor_id VARCHAR(50) PRIMARY KEY,
    sensor_type VARCHAR(50) NOT NULL,
    location_lat DECIMAL(10, 8),
    location_lon DECIMAL(11, 8),
    city VARCHAR(100),
    installation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(20) DEFAULT 'active',
    metadata JSONB,
    last_maintenance TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Index για γεωγραφικά queries
CREATE INDEX idx_sensors_location ON sensors(location_lat, location_lon);
CREATE INDEX idx_sensors_type ON sensors(sensor_type);
CREATE INDEX idx_sensors_status ON sensors(status);

-- ============================================
-- ΠΙΝΑΚΑΣ: Sensor Readings
-- Μετρήσεις αισθητήρων σε πραγματικό χρόνο
-- ============================================
CREATE TABLE sensor_readings (
    reading_id BIGSERIAL,
    sensor_id VARCHAR(50) NOT NULL,
    timestamp TIMESTAMP NOT NULL,
    sensor_type VARCHAR(50) NOT NULL,
    value DECIMAL(10, 2) NOT NULL,
    unit VARCHAR(20),
    is_anomaly BOOLEAN DEFAULT FALSE,
    location_lat DECIMAL(10, 8),
    location_lon DECIMAL(11, 8),
    city VARCHAR(100),
    metadata JSONB,
    processed BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_sensor FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id) ON DELETE CASCADE
);

-- Μετατροπή σε TimescaleDB hypertable για βελτιστοποίηση χρονοσειρών
SELECT create_hypertable('sensor_readings', 'timestamp', if_not_exists => TRUE);

-- Indexes για απόδοση
CREATE INDEX idx_readings_sensor_time ON sensor_readings(sensor_id, timestamp DESC);
CREATE INDEX idx_readings_type_time ON sensor_readings(sensor_type, timestamp DESC);
CREATE INDEX idx_readings_anomaly ON sensor_readings(is_anomaly, timestamp DESC) WHERE is_anomaly = TRUE;
CREATE INDEX idx_readings_processed ON sensor_readings(processed) WHERE processed = FALSE;

-- ============================================
-- ΠΙΝΑΚΑΣ: Aggregated Metrics
-- Συγκεντρωτικά στατιστικά (hourly, daily)
-- ============================================
CREATE TABLE aggregated_metrics (
    metric_id BIGSERIAL PRIMARY KEY,
    sensor_id VARCHAR(50) NOT NULL,
    sensor_type VARCHAR(50) NOT NULL,
    aggregation_type VARCHAR(20) NOT NULL, -- 'hourly', 'daily', 'weekly'
    time_bucket TIMESTAMP NOT NULL,
    avg_value DECIMAL(10, 2),
    min_value DECIMAL(10, 2),
    max_value DECIMAL(10, 2),
    stddev_value DECIMAL(10, 2),
    count_readings INTEGER,
    anomaly_count INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_agg_sensor FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id) ON DELETE CASCADE
);

CREATE INDEX idx_agg_sensor_time ON aggregated_metrics(sensor_id, time_bucket DESC);
CREATE INDEX idx_agg_type_time ON aggregated_metrics(aggregation_type, time_bucket DESC);

-- ============================================
-- ΠΙΝΑΚΑΣ: Alerts
-- Ειδοποιήσεις και προειδοποιήσεις
-- ============================================
CREATE TABLE alerts (
    alert_id BIGSERIAL PRIMARY KEY,
    sensor_id VARCHAR(50) NOT NULL,
    alert_type VARCHAR(50) NOT NULL, -- 'anomaly', 'threshold', 'offline'
    severity VARCHAR(20) NOT NULL, -- 'low', 'medium', 'high', 'critical'
    message TEXT,
    threshold_value DECIMAL(10, 2),
    actual_value DECIMAL(10, 2),
    triggered_at TIMESTAMP NOT NULL,
    acknowledged BOOLEAN DEFAULT FALSE,
    acknowledged_by VARCHAR(100),
    acknowledged_at TIMESTAMP,
    resolved BOOLEAN DEFAULT FALSE,
    resolved_at TIMESTAMP,
    metadata JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_alert_sensor FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id) ON DELETE CASCADE
);

CREATE INDEX idx_alerts_sensor ON alerts(sensor_id, triggered_at DESC);
CREATE INDEX idx_alerts_severity ON alerts(severity, triggered_at DESC);
CREATE INDEX idx_alerts_unresolved ON alerts(resolved, triggered_at DESC) WHERE resolved = FALSE;

-- ============================================
-- ΠΙΝΑΚΑΣ: Blockchain Records
-- Αναφορές σε blockchain καταγραφές
-- ============================================
CREATE TABLE blockchain_records (
    record_id BIGSERIAL PRIMARY KEY,
    transaction_hash VARCHAR(66) UNIQUE NOT NULL,
    block_number BIGINT,
    sensor_id VARCHAR(50),
    reading_id BIGINT,
    data_hash VARCHAR(66) NOT NULL,
    timestamp TIMESTAMP NOT NULL,
    blockchain_network VARCHAR(50) DEFAULT 'ethereum-testnet',
    gas_used BIGINT,
    metadata JSONB,
    verified BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_blockchain_sensor ON blockchain_records(sensor_id, timestamp DESC);
CREATE INDEX idx_blockchain_tx ON blockchain_records(transaction_hash);
CREATE INDEX idx_blockchain_verified ON blockchain_records(verified);

-- ============================================
-- ΠΙΝΑΚΑΣ: Users (για Spring Boot authentication)
-- ============================================
CREATE TABLE users (
    user_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    username VARCHAR(100) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    full_name VARCHAR(255),
    role VARCHAR(50) DEFAULT 'USER', -- 'ADMIN', 'OPERATOR', 'USER'
    enabled BOOLEAN DEFAULT TRUE,
    last_login TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_users_username ON users(username);
CREATE INDEX idx_users_email ON users(email);

-- ============================================
-- VIEWS: Αναλυτικές προβολές
-- ============================================

-- Τελευταίες μετρήσεις ανά αισθητήρα
CREATE OR REPLACE VIEW latest_readings AS
SELECT DISTINCT ON (sensor_id)
    sensor_id,
    timestamp,
    sensor_type,
    value,
    unit,
    is_anomaly,
    city
FROM sensor_readings
ORDER BY sensor_id, timestamp DESC;

-- Ενεργές ειδοποιήσεις
CREATE OR REPLACE VIEW active_alerts AS
SELECT 
    a.alert_id,
    a.sensor_id,
    s.sensor_type,
    s.city,
    a.alert_type,
    a.severity,
    a.message,
    a.actual_value,
    a.triggered_at
FROM alerts a
JOIN sensors s ON a.sensor_id = s.sensor_id
WHERE a.resolved = FALSE
ORDER BY a.severity DESC, a.triggered_at DESC;

-- Στατιστικά ανά πόλη
CREATE OR REPLACE VIEW city_statistics AS
SELECT 
    city,
    sensor_type,
    COUNT(*) as total_readings,
    AVG(value) as avg_value,
    MIN(value) as min_value,
    MAX(value) as max_value,
    COUNT(*) FILTER (WHERE is_anomaly = TRUE) as anomaly_count,
    MAX(timestamp) as last_reading
FROM sensor_readings
WHERE timestamp > NOW() - INTERVAL '24 hours'
GROUP BY city, sensor_type;

-- ============================================
-- FUNCTIONS: Χρήσιμες συναρτήσεις
-- ============================================

-- Ενημέρωση timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Triggers για auto-update
CREATE TRIGGER update_sensors_updated_at
    BEFORE UPDATE ON sensors
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_users_updated_at
    BEFORE UPDATE ON users
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- ============================================
-- SAMPLE DATA: Αρχικά δεδομένα για testing
-- ============================================

-- Εισαγωγή δείγματος αισθητήρων
INSERT INTO sensors (sensor_id, sensor_type, location_lat, location_lon, city, status) VALUES
('TEMP-001', 'temperature', 40.6401, 22.9444, 'Thessaloniki', 'active'),
('AQI-001', 'air_quality', 40.6401, 22.9444, 'Thessaloniki', 'active'),
('PM25-001', 'pm25', 40.6401, 22.9444, 'Thessaloniki', 'active'),
('PM10-001', 'pm10', 40.6401, 22.9444, 'Thessaloniki', 'active'),
('NOISE-001', 'noise', 40.6401, 22.9444, 'Thessaloniki', 'active'),
('CO2-001', 'co2', 40.6401, 22.9444, 'Thessaloniki', 'active'),
('HUM-001', 'humidity', 40.6401, 22.9444, 'Thessaloniki', 'active');

-- Εισαγωγή demo user (password: Admin123!)
INSERT INTO users (username, email, password_hash, full_name, role) VALUES
('admin', 'admin@smartcity.gr', '$2a$10$N9qo8uLOickgx2ZMRZoMye', 'System Administrator', 'ADMIN'),
('operator', 'operator@smartcity.gr', '$2a$10$N9qo8uLOickgx2ZMRZoMye', 'System Operator', 'OPERATOR');

-- ============================================
-- POLICIES & SECURITY
-- ============================================

-- Row Level Security (optional)
ALTER TABLE sensor_readings ENABLE ROW LEVEL SECURITY;
ALTER TABLE alerts ENABLE ROW LEVEL SECURITY;

COMMENT ON TABLE sensors IS 'Καταγραφή IoT αισθητήρων και μεταδεδομένων';
COMMENT ON TABLE sensor_readings IS 'Μετρήσεις αισθητήρων σε πραγματικό χρόνο με TimescaleDB';
COMMENT ON TABLE aggregated_metrics IS 'Συγκεντρωτικά στατιστικά για ανάλυση τάσεων';
COMMENT ON TABLE alerts IS 'Ειδοποιήσεις και προειδοποιήσεις συστήματος';
COMMENT ON TABLE blockchain_records IS 'Αναφορές σε blockchain για διασφάλιση ακεραιότητας';
---
